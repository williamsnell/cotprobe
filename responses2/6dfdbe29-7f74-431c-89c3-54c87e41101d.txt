Answer the following multiple choice question, selecting from the answer A through to J. After thinking, reply directly with your answer. 

The last character of your response must be the letter you have chosen.

Question:

A programmer is designing a program to catalog all books in a library. He plans to have a Book class that stores features of each book: author, title, isOnShelf, and so on, with operations like getAuthor, getTitle, getShelfInfo, and setShelfInfo. Another class, LibraryList, will store an array of Book objects. The LibraryList class will include operations such as listAllBooks, addBook, removeBook, and searchForBook. The programmer plans to implement and test the Book class first, before implementing the LibraryList class. The programmerâ€™s plan to write the Book class first is an example of

Options:

A: procedural abstraction
B: information hiding
C: bottom-up development
D: agile development
E: top-down development
F: data encapsulation
G: object-oriented programming
H: waterfall model
I: modular programming
J: software testing

Answer:
    <think>
<think>
Okay, so I've got this question about programming design patterns and techniques. Let's see. The question is about a programmer designing a Book class and a LibraryList class. The programmer first implements the Book class, then the LibraryList. The question is about what this approach represents.

Hmm, the options are about various programming concepts. Let me think. The question says the programmer implements the Book class first and then LibraryList. So it's about how the classes are structured in relation to each other.

Option A: Procedural Abstraction. That's about defining methods based on functions. But the question says the Book class is implemented before the LibraryList, which might relate more to OOP concepts.

Option B: Information Hiding. That's about encapsulating data. But the question is about the structure of the classes, not their encapsulation.

Option C: Bottom-up Development. I've heard this as bottom-up, which is about starting with specific components and building up. But the question says they're implementing first the Book class, which might be bottom-up.

Wait, the question says the Book class is implemented first. So the approach is about defining classes before the library. That's more about the design hierarchy. So maybe it's bottom-up.

Wait, I'm a bit confused. Bottom-up development is about starting with small, specific components and building up. So when you implement a specific feature first, then add others. So the Book class might be a specific case, and then the library adds more features.

Alternatively, top-down is starting from the big picture and breaking down. But the question says library is after, which might imply that the Book class is a specific instance or class, not a library.

Wait, the question is about the programming design process. So in software development, the order of implementing a specific class before a library suggests a bottom-up approach. Because the Book class is a specific instance, not a library. So the programmer is building the Book class first, then uses it in the LibraryList.

So the approach is bottom-up development, which is option C.
</think>

The programmer's approach of implementing the Book class before the LibraryList suggests a bottom-up method, where specific components are developed first before integrating them into a larger system.

Answer: C: bottom-up development