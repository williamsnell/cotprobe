Answer the following multiple choice question, selecting from the answer A through to J. After thinking, reply directly with your answer. 

The last character of your response must be the letter you have chosen.

Question:

Illustrate transfer of control in a PL/I program, usingGOTO statements.

Options:

A: The GOTO statement in PL/I program doesn't alter the processing sequence.
B: The GOTO statement in a PL/I program resumes processing at the next function or procedure.
C: The GOTO statement in PL/I program alters the processing sequence, discontinues the normal sequential execution and processing resumes at a point that is indicated by a label.
D: The GOTO statement in a PL/I program creates a subroutine call to a labeled section of the code.
E: The GOTO statement continues the sequential execution.
F: The GOTO statement in a PL/I program is used to repeat the execution of a loop from the beginning.
G: The GOTO statement in a PL/I program is a conditional statement that only executes if a specified condition is true.
H: The GOTO statement in a PL/I program causes the program to terminate immediately.
I: The GOTO statement in PL/I program processing resumes at a point without a label.
J: The GOTO statement in a PL/I program pauses execution and waits for user input before continuing.

Answer:
    <think>
<think>
Okay, so I have this question about PL/I and GOTO statements. I'm a bit rusty on this, but I'll try to think it through.

First, the question is asking about how the GOTO statement transfers control in a PL/I program. The options are A to J. I need to figure out which one is correct.

Let me recall what I know about GOTOs in PL/I. From what I remember, GOTO statements are used to jump to a specific line in the code. So, when a program reaches a GOTO, it jumps to the label (which is the line number) where the label is defined.

Wait, so GOTO statements don't change the processing sequence. They just skip over some code. Let me check the options.

Option A says the GOTO doesn't alter the processing sequence. That sounds correct. So A is a candidate.

Option B says the GOTO resumes processing at the next function or procedure. No, that's more like a label for a label. It doesn't resume, it just skips.

Option C says GOTO alters the sequence, which skips a point and resumes. That's what I was thinking—GOTOs cause the program to pause and resume at a label. So C sounds accurate.

Option D says GOTO creates a subroutine call. No, I don't think that's right. Subroutines are usually called with call statements, not GOTOs.

Option E: GOTO continues execution. No, that's not how GOTOs work. They don't continue; they skip.

Option F: GOTO repeats a loop. Again, no. GOTOs aren't loop constructs.

Option G: GOTO is a conditional. No, that's not it. GOTOs are more for jumping.

Option H: GOTO causes the program to terminate. No, that's not it. It just skips.

Option I: GOTO resumes at a point without a label. No, because that's where a label would be. Instead, it's the label that directs where to resume.

Option J: GOTO pauses and waits for input. No, GOTO doesn't do that. It just jumps.

So looking back, C says the GOTO statement in PL/I program alters the processing sequence, which skips a label and resumes at that point. That makes sense.

Wait, I'm a bit confused between C and A. Let me think again: GOTO doesn't change the processing order; it just skips. So processing continues after the label. So when you have a GOTO, the program stops at the current line and goes to the label. So the sequence is altered. So C is correct.

Alternatively, if you have a label, say label 10, and a GOTO label 10, the program skips to line 10 and continues. So the processing sequence is altered because it goes to a different line—so the processing order is changed, and the program resumes at that point. So yes, C is correct.

So the correct answer should be C.
</think>

The correct answer is C. The GOTO statement in PL/I program alters the processing sequence by jumping to the specified label, effectively skipping over the code between the current line and the label. 

Answer: C