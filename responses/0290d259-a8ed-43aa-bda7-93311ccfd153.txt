Answer the following multiple choice question, selecting from the answer A through to J. After thinking, reply directly with your answer. 

The last character of your response must be the letter you have chosen.

Question:

A programmer is designing a program to catalog all books in a library. He plans to have a Book class that stores features of each book: author, title, isOnShelf, and so on, with operations like getAuthor, getTitle, getShelfInfo, and setShelfInfo. Another class, LibraryList, will store an array of Book objects. The LibraryList class will include operations such as listAllBooks, addBook, removeBook, and searchForBook. The programmer plans to implement and test the Book class first, before implementing the LibraryList class. The programmer’s plan to write the Book class first is an example of

Options:

A: procedural abstraction
B: information hiding
C: bottom-up development
D: agile development
E: top-down development
F: data encapsulation
G: object-oriented programming
H: waterfall model
I: modular programming
J: software testing

Answer:
    
<think>
Okay, so I have this programming question here, and I need to figure it out step by step. Let's read it carefully.

The question is about a programmer designing a program to catalog books in a library. He's creating a Book class and a LibraryList class. The Book class has features like author, title, isOnShelf, and methods like getAuthor, getTitle, getShelfInfo, and setShelfInfo. Then there's a LibraryList class that holds an array of Book objects and includes operations like listAllBooks, addBook, removeBook, and searchForBook.

The key point here is that the programmer plans to implement and test the Book class first before working on the LibraryList. The question is asking what this approach is an example of, with options given from A to J.

Hmm, I remember that in software development, there are various strategies on how to structure and build programs. Let me think about the terms provided.

Looking at the options:

A: Procedural abstraction – this involves breaking down a problem into smaller, more manageable procedures or functions. It's more about structuring code into functions rather than objects.

B: Information hiding – this is about hiding the details of how something is implemented and exposing only what's necessary. It's related to encapsulation, keeping the internal workings hidden.

C: Bottom-up development – this approach starts by developing the lowest-level components first and then building up to higher levels. So, in this case, the Book class is a lower-level component compared to the LibraryList, which probably uses it.

D: Agile development – an iterative software development process that emphasizes flexibility and collaboration. It's more about the process than the structure.

E: Top-down development – the opposite of bottom-up, starting with high-level designs and breaking them down into smaller parts.

F: Data encapsulation – this is closely related to information hiding. It's about bundling data and methods that operate on that data within a single unit, like a class.

G: Object-oriented programming – this is the broader concept that includes classes, objects, inheritance, etc. It's the paradigm used here, but the question is about the approach, not the paradigm.

H: Waterfall model – a linear software development model where each phase must be completed before the next begins. It's a project management approach, not necessarily the structural approach here.

I: Modular programming – structuring a program as a collection of independent, interchangeable modules. Each module is a component that can be developed separately.

J: Software testing – the process of testing software, which is definitely important but not directly related to the approach of building the classes in a certain order.

So, the programmer is working on the Book class first, which is a lower-level component, and then moving on to the LibraryList, which depends on it. That sounds like bottom-up development. Because bottom-up starts with the smallest units and builds up.

Wait, but what about modular programming? Modular programming involves breaking the system into modules, which are developed separately. But bottom-up specifically refers to building from the lower levels up. So in this case, the Book class is a module, and the LibraryList uses it. So both modular and bottom-up could be relevant, but the question is about the approach of writing the Book first.

Modular programming is about structure, but the order of implementation is more about the approach. So, the plan to write the Book first is a bottom-up approach because it starts with the lower-level modules and works upwards.

Another option could be procedural abstraction, but that's more about functions rather than the order of implementation. Similarly, data encapsulation is about the structure of the class, not the order.

So the correct answer should be C: bottom-up development.
</think>

The programmer's approach of implementing the Book class first, which is a lower-level component, before moving on to the higher-level LibraryList class, exemplifies bottom-up development. This method focuses on building from the smallest, most fundamental parts upward.

Answer: C