Answer the following multiple choice question, selecting from the answer A through to J. After thinking, reply directly with your answer. 

The last character of your response must be the letter you have chosen.

Question:

Bob writes down a number between 1 and 1,000. Mary must identify that number by asking "yes/no" questions of Bob. Mary knows that Bob always tells the truth. If Mary uses an optimal strategy, then she will determine the answer at the end of exactly how many questions in the worst case?

Options:

A: 250
B: 20
C: 500
D: 100
E: 2
F: 1,000
G: 999
H: 50
I: 10

Answer:
    
<think>
Okay, so I've got this question here where Bob writes down a number between 1 and 1,000, and Mary has to figure out what that number is by asking yes/no questions. The question is asking how many questions Mary needs to ask in the worst case if she uses an optimal strategy. The options are from A to I, with numbers like 250, 20, 500, etc.

Hmm, let's think about this. I remember something about binary search being the optimal way to find a number in a sorted list. Binary search works by repeatedly dividing the search interval in half. So, for example, if you have a list of numbers, you guess the middle one, and depending on whether the target is higher or lower, you eliminate half the list each time.

In this case, the numbers range from 1 to 1,000. That's 1,000 possible numbers. So Mary can use a binary search approach by asking questions that split the remaining possibilities in half each time.

Wait, how does that translate into the number of questions? I think it's related to logarithms. Specifically, the base-2 logarithm because each question splits the possibilities into two. So the number of questions needed would be the logarithm base 2 of the number of possibilities.

Let me do the math. Log base 2 of 1,000. Now, I know that 2^10 is 1,024. So log2(1024) is 10. That means that 2^9 is 512, and 2^10 is 1024. Since 1000 is a bit less than 1024, but more than 512, the log2(1000) is a bit more than 9.95. But since you can't ask a fraction of a question, you round up to 10.

So that would mean Mary needs 10 questions in the worst case. Let me check the options. The options are A:250, B:20, C:500, D:100, E:2, F:1000, G:999, H:50, I:10. So the correct answer would be I:10.

Wait, but let me make sure I'm not making a mistake. Sometimes people think about the number of bits needed to represent the number. Since 10 bits can represent 1024 different values, which covers 1,000, so Mary would need 10 bits, which correspond to 10 yes/no questions. That makes sense.

Another way to think about it is iteratively halving the range. Starting with 1-1000, the first question would narrow it down to 500, then 250, then 125, then 62 or 63, then about 31, then 15 or 16, then 7 or 8, then 3 or 4, then 1 or 2, and finally down to 1. Let's count the steps:

1. 1000 → 500
2. 500 → 250
3. 250 → 125
4. 125 → 62 or 63
5. 62 → 31
6. 31 → 15 or 16
7. 15 → 7 or 8
8. 7 → 3 or 4
9. 3 → 1 or 2
10. 2 → 1

So that's 10 steps, which confirms the earlier calculation. So yeah, the answer should be 10, which is option I.
</think>

Mary can determine the number using a binary search strategy, which minimizes the number of yes/no questions by halving the range each time. Since there are 1,000 possible numbers, the number of questions needed is the base-2 logarithm of 1,000, which is approximately 9.95. Rounding up, she needs 10 questions. 

Answer: I