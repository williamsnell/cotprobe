Answer the following multiple choice question, selecting from the answer A through to J. After thinking, reply directly with your answer. 

The last character of your response must be the letter you have chosen.

Question:

Which of the following is true of mutation-based fuzzing?

Options:

A: It only works for network-based fuzzing, not file-based fuzzing
B: It modifies the target program's code to test its robustness
C: It requires an initial error-free program to start the process
D: It uses a random number generator to create new inputs
E: It uses a fixed set of inputs to test the program
F: It works by making small mutations to the target program to induce faults
G: Each input is mutation that follows a given grammar
H: It generates each different input by modifying a prior input
I: It only makes sense for file-based fuzzing, not network-based fuzzing
J: It creates a completely new input for each test

Answer:
    <think>
<think>
Okay, so I have this question about mutation-based fuzzing, and I need to figure out which option is correct. I'm a bit rusty on my cybersecurity concepts, but I'll try to think it through.

First, what is mutation-based fuzzing? From what I remember, fuzzing is a technique used to find security vulnerabilities in software by providing it with unexpected inputs. There are different types of fuzzing, like mutation-based, which I think modifies existing input to create new test cases.

So the question is asking which statement is true about mutation-based fuzzing. Let's look at the options one by one.

Option A: It only works for network-based fuzzing, not file-based. Hmm, I don't think that's right. Fuzzing can be applied to different types of inputs, whether it's network packets or files. So mutation-based should work for both, so A is probably false.

Option B: It modifies the target program's code. Wait, no. Mutation-based fuzzing doesn't change the program itself. Instead, it changes the input given to the program. So B is incorrect.

Option C: Requires an initial error-free program. No, I don't think so. Fuzzing is about testing the program's behavior when given unexpected inputs. It doesn't need the program to be error-free to start with; that's the point of testing. So C is wrong.

Option D: Uses a random number generator to create new inputs. I'm not sure. Mutation-based might modify existing inputs rather than generating random ones. So maybe D isn't correct. Or does it use random for mutations? I'm not certain yet.

Option E: Uses a fixed set of inputs. That doesn't sound right. Mutation-based would generate new inputs by modifying existing ones, so it's not fixed. So E is probably wrong.

Option F: Works by making small mutations to the target program. Wait, no. It's the input that's mutated, not the program. So F is incorrect.

Option G: Each input is a mutation that follows a given grammar. Hmm, this might be more about grammar-based fuzzing, where you have a defined structure to follow. Mutation-based might not necessarily follow a grammar; it just alters existing inputs. So G might be false.

Option H: Generates each different input by modifying a prior input. Yes, that sounds familiar. Mutation-based fuzzing takes one or more initial inputs and then mutates them to create new test cases. So H could be the correct answer.

Option I: Only makes sense for file-based, not network-based. Similar to option A, I think it applies to both. So I's incorrect.

Option J: Creates a completely new input each time. No, because mutation-based builds on previous inputs, so they're not completely new each time. So J is wrong.

So putting it together, the correct answer should be H: It generates each different input by modifying a prior input. That aligns with what I know about mutation-based fuzzingâ€”starting with some initial input and then changing it incrementally to test different paths.
</think>

The correct answer is H. Mutation-based fuzzing generates each different input by modifying a prior input.

Answer: H