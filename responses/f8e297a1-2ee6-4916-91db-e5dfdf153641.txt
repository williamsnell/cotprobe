Answer the following multiple choice question, selecting from the answer A through to J. After thinking, reply directly with your answer. 

The last character of your response must be the letter you have chosen.

Question:

Let P be a procedure that for some inputs calls itself (i.e., is recursive). If P is guaranteed to terminate, which of the following statements must be true?
I. P has a local variable.
II. P has an execution path where it does not call itself.
III. P either refers to a global variable or has at least one parameter.

Options:

A: II only
B: I and II only
C: II and III only
D: P has an execution path where it does not call itself and refers to a global variable
E: I and III only
F: None of the above
G: I only
H: III only
I: I, II and III
J: P has a local variable and refers to a global variable

Answer:
    <think>
<think>
Okay, I'm trying to figure out this question about recursive procedures. Let me read it carefully.

The question says that P is a recursive procedure that's guaranteed to terminate. I need to determine which of the statements I, II, or III must be true.

Let me break down each statement one by one.

Statement I: P has a local variable.
Hmm. So, does a recursive procedure necessarily have a local variable? Well, a procedure can be recursive without any local variables. For example, a simple recursive function might not use any local variables except for parameters. Wait, but in most programming languages, even if it's recursive, it can have no local variables if it's just using parameters. For instance, a function that adds n by calling itself with n-1 until n is 0 doesn't have any local variablesâ€”it just uses the parameter. So in that case, Statement I isn't necessarily true. So I can't say that I must be true.

Statement II: P has an execution path where it does not call itself.
This seems like it's about the base case in recursion. Because for a recursive function to terminate, it must have a base case where it doesn't call itself. Otherwise, it would loop infinitely. So if P is guaranteed to terminate, there must be at least one execution path where it doesn't call itself. So II must be true.

Statement III: P either refers to a global variable or has at least one parameter.
Wait, let's think. A recursive function can be written without any parameters? No, because it needs to pass some value to itself each time. Wait, no, actually, wait. Wait, in some languages, functions can have no parameters, but then how would they be recursive? Because in each recursive call, you have to pass an argument. So a function without parameters can't call itself recursively because it has no way to pass a new value each time. So every recursive function must have at least one parameter to pass the new value each call. Alternatively, if it's using a global variable, then it doesn't need a parameter because it can modify the global variable each time. So, for example, a function that increments a global variable each time and checks if it's reached a certain value would terminate. So in that case, it doesn't have parameters but uses a global variable. So Statement III is saying that for P to be recursive and terminate, it must either refer to a global variable or have at least one parameter. So that seems to cover both cases. So III must be true.

Wait, but wait. If a function has no parameters, can it be recursive? Because without parameters, each recursive call would have the same state, so it would loop infinitely unless there's a base case. But wait, if it's using a global variable, it can modify that. So for example:

function P() {
    static int count = 0;
    count++;
    if (count >= 10) return;
    P();
}

Here, P has no parameters but refers to a static variable (which is a kind of global variable in the function's scope). So it's recursive, has no parameters, and uses a global variable. So in this case, Statement III is true because it refers to a global variable.

Alternatively, if a function has parameters, it can call itself with modified parameters. So in any case, P must either have parameters or refer to a global variable. So Statement III must be true.

Wait, but what if a function is recursive but doesn't have parameters and doesn't use a global variable? Is that possible? Like, can it have no parameters and no global variables but still terminate? I don't think so, because each recursive call would have to change something to approach the base case. Without any parameters and no global variables, each call would be the same, leading to infinite recursion. So for it to terminate, it must have parameters or a global variable.

So, Statement III must be true.

Wait, but the original question is about which statements must be true. So II is true, III is true. What about I? I thought I is not necessarily true because a recursive function can exist without local variables, relying solely on parameters.

So looking at the options:

Option C: II and III only. So that would be the answer.
</think>

The question asks which statements must be true for a recursive procedure P that is guaranteed to terminate.

- **Statement I**: P has a local variable. This is not necessarily true because a recursive function can exist without local variables, relying solely on parameters or global variables.
- **Statement II**: P has an execution path where it does not call itself. This is true because a terminating recursive function must have a base case that stops the recursion.
- **Statement III**: P either refers to a global variable or has at least one parameter. This is true because a recursive function must pass information (via parameters or global variables) to terminate.

Since II and III are true, the correct answer is:

C: II and III only

Answer: C