Answer the following multiple choice question, selecting from the answer A through to J. After thinking, reply directly with your answer. 

The last character of your response must be the letter you have chosen.

Question:

Illustrate transfer of control in a PL/I program, usingGOTO statements.

Options:

A: The GOTO statement in PL/I program doesn't alter the processing sequence.
B: The GOTO statement in a PL/I program resumes processing at the next function or procedure.
C: The GOTO statement in PL/I program alters the processing sequence, discontinues the normal sequential execution and processing resumes at a point that is indicated by a label.
D: The GOTO statement in a PL/I program creates a subroutine call to a labeled section of the code.
E: The GOTO statement continues the sequential execution.
F: The GOTO statement in a PL/I program is used to repeat the execution of a loop from the beginning.
G: The GOTO statement in a PL/I program is a conditional statement that only executes if a specified condition is true.
H: The GOTO statement in a PL/I program causes the program to terminate immediately.
I: The GOTO statement in PL/I program processing resumes at a point without a label.
J: The GOTO statement in a PL/I program pauses execution and waits for user input before continuing.

Answer:
    
<think>
Okay, so I have this multiple-choice question about PL/I programming, specifically about how the GOTO statement works in terms of transferring control. I'm a bit rusty on PL/I, but I'll try to think it through.

First, I remember that GOTO statements are used to transfer control from one part of the program to another. In many programming languages like COBOL or BASIC, GOTO is used to jump to a labeled line or section. But I'm not entirely sure about PL/I's specifics.

Looking at the options:

Option A says the GOTO doesn't alter the processing sequence. That doesn't sound right because GOTO is all about changing the flow.

Option B mentions resuming at the next function or procedure. Hmm, that sounds more like a subroutine call, maybe using something like CALL instead of GOTO.

Option C says GOTO alters the processing sequence, stops the normal flow, and resumes at a labeled point. That makes sense because GOTO jumps to a label, which is a specific point in the code.

Option D claims GOTO creates a subroutine call. I think that's incorrect because subroutine calls usually require a CALL statement, not GOTO.

Option E says it continues sequentially, which is the opposite of what GOTO does.

Option F talks about repeating a loop from the start. That's more about loops, like using a GOTO within a loop structure, but I'm not sure if that's the primary function.

Option G describes GOTO as a conditional statement. No, conditionals are handled by IF statements, not GOTO.

Option H says it terminates the program. I don't think GOTO does that; it's more about control flow within the program.

Option I says processing resumes without a label. That doesn't make sense because GOTO needs a label to jump to.

Option J suggests it pauses for user input. That sounds more like an INPUT statement or some form of WAIT, not GOTO.

So putting it together, the correct answer should be option C because GOTO changes the execution flow to a labeled point. It stops the normal sequential execution and jumps to where the label is defined.
</think>

The GOTO statement in PL/I is used to transfer control to a labeled section of the code, altering the normal sequential execution.

Answer: C