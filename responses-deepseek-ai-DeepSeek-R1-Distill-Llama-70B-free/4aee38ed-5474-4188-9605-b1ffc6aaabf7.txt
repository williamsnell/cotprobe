Answer the following multiple choice question, selecting from the answer A through to J. After thinking, reply directly with your answer. 

The last character of your response must be the letter you have chosen.

Question:

A starvation-free job-scheduling policy guarantees that no job waits indefinitely for service. Which of the following job-scheduling policies is starvation-free?

Options:

A: Youngest job first
B: Least frequently used
C: Round-robin
D: Most recently used
E: Longest job first
F: Random job selection
G: Priority queuing
H: Shortest job first

Answer:
    <think>
<think>
Okay, so I've got this multiple-choice question about job-scheduling policies and which one is starvation-free. Hmm, I'm a bit rusty on this, but I'll try to think it through.

The question is asking which policy guarantees that no job waits indefinitely. Starvation, in this context, means that a job never gets a chance to run because the scheduler keeps choosing other jobs over it.

Let me go through the options one by one.

Option A: Youngest job first. So this policy would prioritize the most recent jobs. I'm not sure about this one. If a job is older, maybe it keeps getting pushed back as new jobs come in. That might cause the older jobs to starve. So this might not be starvation-free.

Option B: Least frequently used. This sounds like it's about how often a resource is used. So maybe jobs that haven't been used much get priority. But wait, in job scheduling, this could relate to how often a job has run. If a job hasn't run much, it gets priority. But I'm not sure if this inherently avoids starvation because it depends on how the policy is implemented. It might prevent starvation, but I'm not certain.

Option C: Round-robin. Oh right, round-robin uses time slices. Each job gets a turn for a certain amount of time, then it's switched out. So every job gets a chance to run eventually. That should prevent starvation because no job is left waiting forever. So this seems like a strong candidate.

Option D: Most recently used. This is similar to youngest job first. If the scheduler picks the job that was most recently added, older jobs might never get a chance. So this could lead to starvation.

Option E: Longest job first. Wait, doesn't this mean that the longer jobs are scheduled first? If a system is always taking the longest job next, shorter jobs might wait indefinitely if there's a steady stream of long jobs. That sounds like it could cause starvation for the shorter ones.

Option F: Random job selection. Hmm, if jobs are chosen at random, theoretically, any job has a chance. But in practice, there's a chance that a particular job is never selected, especially if there are many jobs. So this might not be starvation-free because it's possible (though unlikely) for a job to be perpetually skipped.

Option G: Priority queuing. This assigns priorities to jobs, and higher-priority jobs run first. But if a job has the lowest priority and there's always higher-priority jobs coming in, that low-priority job would never run. So this can cause starvation unless there's some mechanism to increase the priority over time.

Option H: Shortest job first. This is where the scheduler picks the shortest job first. If there are always shorter jobs arriving, longer jobs might never get a chance and starve. So this isn't starvation-free either.

Putting it all together, the correct answer should be Round-robin because it cycles through all jobs, giving each a fair share of time. So no job is left waiting indefinitely. Therefore, option C is the one that's starvation-free.
</think>

The question asks which job-scheduling policy is starvation-free, meaning no job waits indefinitely for service. To determine this, each option is analyzed:

- **Option A (Youngest job first):** Prioritizes newer jobs, potentially causing older jobs to starve. Not starvation-free.
- **Option B (Least frequently used):** Prioritizes jobs based on usage frequency, but its implementation details determine starvation prevention. Not definitively starvation-free.
- **Option C (Round-robin):** Allocates time slices to each job in turn, ensuring every job gets a chance to run. This prevents starvation.
- **Option D (Most recently used):** Similar to youngest job first, older jobs may starve. Not starvation-free.
- **Option E (Longest job first):** Shorter jobs may starve if longer jobs dominate the queue. Not starvation-free.
- **Option F (Random job selection):** While random, there's a chance a job could be perpetually skipped, so not guaranteed to be starvation-free.
- **Option G (Priority queuing):** Low-priority jobs may starve if higher-priority jobs continually arrive. Not starvation-free unless priorities adjust over time.
- **Option H (Shortest job first):** Longer jobs may starve if shorter jobs are consistently prioritized. Not starvation-free.

Round-robin scheduling (Option C) is the only policy that guarantees no job waits indefinitely, making it starvation-free.

Answer: C