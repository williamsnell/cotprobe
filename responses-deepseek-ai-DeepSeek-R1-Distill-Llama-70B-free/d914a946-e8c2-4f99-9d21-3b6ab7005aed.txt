Answer the following multiple choice question, selecting from the answer A through to J. After thinking, reply directly with your answer. 

The last character of your response must be the letter you have chosen.

Question:

Which of the following is true of mutation-based fuzzing?

Options:

A: It only works for network-based fuzzing, not file-based fuzzing
B: It modifies the target program's code to test its robustness
C: It requires an initial error-free program to start the process
D: It uses a random number generator to create new inputs
E: It uses a fixed set of inputs to test the program
F: It works by making small mutations to the target program to induce faults
G: Each input is mutation that follows a given grammar
H: It generates each different input by modifying a prior input
I: It only makes sense for file-based fuzzing, not network-based fuzzing
J: It creates a completely new input for each test

Answer:
    <think>
<think>
Okay, so I've got this question about mutation-based fuzzing. I'm a bit new to this, but I'll try to think it through. Let's see what I remember about fuzzing.

Fuzzing is a type of software testing where you provide unexpected or random inputs to a program to see if it crashes or behaves incorrectly. There are different types of fuzzing, like mutation-based and generation-based.

The question is specifically about mutation-based fuzzing. From what I remember, mutation-based starts with a set of valid inputs and then modifies them in various ways. So, it takes an existing input and changes itâ€”like altering some bytes, adding data, truncating it, etc. This creates new inputs that are mutations of the original.

Looking at the options now. Let's go through each one.

Option A: It only works for network-based fuzzing, not file-based. Wait, I think mutation-based can be used in both. For example, you can take a file and mutate it, or take network packets and mutate them. So A might not be correct.

Option B: Modifies the target program's code. No, because mutation-based is about changing the inputs, not the program itself. That's more like code mutation testing, which is different.

Option C: Requires an initial error-free program. I think that's not necessarily true. The starting inputs might just be any valid examples, not necessarily error-free. The point is to see if changes cause issues, regardless of the initial state.

Option D: Uses a random number generator. That's a possibility. Because it's creating mutations, which might involve random changes. But I'm not sure if it's the defining feature.

Option E: Fixed set of inputs. No, because mutation implies generating new inputs, so it's not fixed.

Option F: Makes small mutations to the target program. No, as before, the mutations are to the inputs, not the program itself.

Option G: Each input follows a given grammar. That sounds more like generation-based fuzzing, where inputs are built according to a grammar. Mutation-based doesn't necessarily do that.

Option H: Generates each input by modifying a prior one. Oh, that makes sense. So each new input is a mutation of a previous one. So H seems correct.

Option I: Only for file-based. No, as I thought earlier, probably applies to both.

Option J: Creates a completely new input each time. Hmm. So, does it create new from scratch, or modify existing. Mutation-based modifies existing, so J might not be correct.

So the correct answer is likely H: It generates each different input by modifying a prior input.

Another thought: Mutation-based is also called Dumb Fuzzing sometimes. It takes known good inputs and changes them randomly or systematically. So each new input is a modification of the previous one, which aligns with option H.

Yes, I'm pretty confident that H is the right choice.
</think>

The correct answer is:

H: It generates each different input by modifying a prior input.

This is because mutation-based fuzzing involves taking existing inputs and making small changes to them to create new test cases, which aligns with option H.

Answer: H