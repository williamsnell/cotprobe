Answer the following multiple choice question, selecting from the answer A through to J. After thinking, reply directly with your answer. 

The last character of your response must be the letter you have chosen.

Question:

The stock of the CCC Corporation is currently valued at $12 and is assumed to possess all the properties of geometric Brownian motion. It has an expected annual return of 15%, an annual volatility of 20%, and the annual risk-free is 10%. Using a binomial lattice, determine the price of a call option on CCC stock maturing in 10 monthes time with a strike price of $14 (Let the distance between nodes on your tree be 1 month in length).

Options:

A: 50.0
B: 60.0
C: 55.0
D: 44.0
E: 48.0
F: 53.0
G: 42.0
H: 46.0
I: 51.0
J: 45.0

Answer:
    <think>
<think>
Okay, so I've got this problem about pricing a call option using a binomial lattice model. Hmm, I remember that binomial models are used to determine the price of options by simulating the possible prices of the underlying asset over time. Let's see, the problem gives me some specific parameters, so I need to break them down step by step.

First, the stock is currently valued at $12. The call option has a strike price of $14 and matures in 10 months. The risk-free rate is 10% annually, the expected return is 15%, and the volatility is 20% annually. The tree's nodes are spaced one month apart, so each step is a month.

Wait, since the time to maturity is 10 months, that would mean we have 10 steps in our binomial tree. Each step is a month, right? So the number of periods, n, is 10.

I think I remember there's a formula for calculating the up and down factors in the binomial model. Oh right, the up factor is e^(σ√Δt), and the down factor is the inverse. Here, σ is the volatility, which is 0.20, and Δt is the time per step, which is 1/12 since each step is a month in an annual model. Wait, wait, no, because the total time is 10 months, so each step is 1 month, so Δt is 1/12? No, wait, wait. Wait, no—volatility is given annually, so each month is 1/12 of a year. So Δt is 1/12.

Wait, but the time to maturity is 10 months, which is 10/12 years, so each step is 1/12 years. So n would be 10 steps. Oh wait, no, no, wait, the problem says the distance between nodes is 1 month, so each step is 1 month. So for 10 months, we have 10 steps. So n=10, each step is Δt = 1/12 years.

So the up factor u is e^(σ√Δt) = e^(0.20 * sqrt(1/12)). Let me calculate that. The square root of 1/12 is approximately 0.2887. Multiply by 0.20 gives about 0.0577. e^0.0577 is roughly 1.0595. So u ≈ 1.0595. The down factor d is 1/u, so about 0.9443.

Wait, but I might have messed up the formula. Alternatively, sometimes the model uses u = e^(σ√Δt), which I think is correct. So yeah, that part seems right.

Next, I think the risk-neutral probability is needed. The formula for the risk-neutral probability (p) is [e^(rΔt) - d]/(u - d), where r is the risk-free rate. But wait, in the risk-neutral framework, the expected return of the stock is the risk-free rate, right? Because we're discounting at the risk-free rate. So the expected return used in the real world (like 15%) doesn't directly matter here; instead, we adjust using the risk-neutral probabilities.

Wait, no, wait. Oh, right, in the binomial model under risk neutrality, the expected return is the risk-free rate. So when calculating the probabilities, we don't use the real-world expected return but the risk-free rate. So the formula for p is [e^(rΔt) - d]/(u - d), where r is the risk-free rate.

So let's compute that. r is 10% or 0.10 annually. Δt is 1/12. So e^(0.10 * 1/12) is e^(0.008333), which is approximately 1.00833. So numerator is 1.00833 - 0.9443 ≈ 0.06403. Denominator is 1.0595 - 0.9443 ≈ 0.1152. So p ≈ 0.06403 / 0.1152 ≈ 0.5556 or 55.56%.

Then, the other probability is (1 - p) ≈ 0.4444.

Now, I need to build the binomial tree for 10 steps. Each step, the stock price can go up or down. So starting from $12, after the first month, it can go to 12*u ≈ 12 * 1.0595 ≈ 12.714 or 12*d ≈ 12 * 0.9443 ≈ 11.3116.

Wait, but wait, this seems a bit tedious for 10 steps. Maybe there's a formula to compute the option price at expiration and then discount it back. So for each node at expiration, the call option's value is max(S - K, 0), where S is the stock price and K is the strike price.

So at expiration (in 10 months), the stock price can be S = 12 * u^j * d^(10-j), where j is the number of up moves. The call option's value at each node is max(S - 14, 0).

But calculating this for all possible nodes (from j=0 to j=10) and then computing the expected value under risk-neutral probabilities and discounting would give the option price.

Alternatively, maybe I can compute the option price using the binomial formula, which is the sum over all possible paths of [p^j (1-p)^(n-j) * max(S*T - K, 0)] all multiplied by e^(-r*T), where T is the time to maturity.

Wait, but in our case, each step is 1 month, so T is 10/12 years, which is 10 months. So the discounting factor would be e^(-r*T) but perhaps more accurately, since each step is 1 month, the discounting is done each month using the monthly risk-free rate.

Wait, perhaps a better approach is to calculate the present value at each node recursively. Starting from the end nodes (maturity), then working backward, calculating the option price at each node as the discounted expected value of the next period's prices.

But this would require building the entire lattice, which for 10 steps would have 11 nodes at maturity. That's a lot to compute manually, but let's try to find a pattern or formula.

Wait, another approach: using the Cox-Ross-Rubinstein formula. The formula for the call option price is S*N(d1) - K e^(-rT)*N(d2), but that's the Black-Scholes formula. But since we're using a binomial model, perhaps the approach is similar, but with the appropriate adjustments.

Wait, but the question specifies using a binomial lattice, so I think the correct approach is to model it step by step. But given the time constraints, perhaps there's a shortcut formula for the binomial model.

The general formula for the binomial option price is:

C = S * sum_{j=0}^n [ (p^j (1-p)^(n-j)) * N(j; n, p) ) ] - K e^(-rT) * sum [ ... same ... ]

Wait, perhaps a better way is to use the formula:

C = e^(-rT) * sum_{j=0}^n [ C_j * p^j (1-p)^(n-j) ]

Where C_j is the option payoff at each terminal node, which is max(S * u^j d^(n-j) - K, 0).

So in this case, T is 10/12 years, so rT is 0.10 * (10/12) ≈ 0.08333.

So e^(-rT) ≈ e^(-0.08333) ≈ 0.9205.

Now, n is 10, since each step is a month, and we have 10 steps.

So for each j from 0 to 10, we compute S_final = 12 * u^j * d^(10-j), then compute max(S_final -14, 0), multiply by p^j (1-p)^(10-j), and sum all these, then multiply by e^(-rT).

Alternatively, since u = e^(σ sqrt(Δt)), and d = 1/u, and p is calculated as (e^(r Δt) - d)/(u - d), which I've already determined as approximately 0.5556.

So let's compute this sum. But calculating this manually for j=0 to 10 would be time-consuming, but perhaps we can find a pattern or use a formula.

Wait, maybe I can compute each term for j from 0 to 10 and sum them up.

First, let's compute u and d more accurately.

u = e^(0.20 * sqrt(1/12)) → sqrt(1/12) ≈ 0.28867, so 0.20 * 0.28867 ≈ 0.057734. e^0.057734 ≈ 1.05953.

d = 1/u ≈ 0.94433.

p = [e^(0.10*(1/12)) - d]/(u - d) → e^(0.008333) ≈ 1.00833. So numerator is 1.00833 - 0.94433 = 0.064. Denominator is 1.05953 - 0.94433 ≈ 0.1152. So p ≈ 0.064 / 0.1152 ≈ 0.5556, as before.

So for each j in 0-10:

C_j = max(12 * u^j * d^(10-j) - 14, 0)

We can compute this for each j, then multiply by p^j (1-p)^(10-j), sum all, then multiply by e^(-rT).

Alternatively, maybe using the formula for the expected payoff under risk-neutral probabilities and discounting.

Let me try to compute each term step by step.

First, compute for each j from 0 to 10:

S_j = 12 * u^j * d^(10-j)

If S_j >14, then C_j = S_j -14, else 0.

Compute p^j*(1-p)^(10-j)*C_j for each j and sum.

This is going to take a while, but let's proceed.

Alternatively, perhaps there's a better approach. Let's compute for each j the value.

But maybe we can look for a pattern or find the j where S_j exceeds 14.

Let's compute S_j for each j.

u ≈ 1.05953, d≈0.94433.

Compute S_j =12 * (1.05953)^j * (0.94433)^(10-j)

We can compute for each j:

Let me make a table:

j | u^j | d^(10-j) | S_j =12*u^j*d^(10-j) | If S_j>14, C_j = S_j-14, else 0

Let's compute this for j=0 to j=10.

Starting with j=0:

u^0=1, d^10 ≈ 0.94433^10. Let's compute 0.94433^10.

Wait, 0.94433^10, let's compute step by step.

0.94433^1 = 0.94433

^2 ≈ 0.94433 * 0.94433 ≈ 0.8919.

^3 ≈ 0.8919 * 0.94433 ≈ 0.8423.

^4 ≈ 0.8423 * 0.94433 ≈ 0.796.

^5 ≈ 0.796 *0.94433≈0.752.

^6≈0.752 *0.94433≈0.710.

^7≈0.710 *0.94433≈0.671.

^8≈0.671*0.94433≈0.634.

^9≈0.634 *0.94433≈0.599.

^10≈0.599 *0.94433≈0.566.

So S_0 = 12 *1 *0.566 ≈ 6.792. Which is way below 14, so C_0=0.

j=1:

u^1≈1.05953.

d^9≈0.599 (from j=9 above).

Wait, no, earlier for j=0, d^10≈0.566. So for j=1, d^(10-1)=d^9=0.566 * (1/0.94433) ≈ 0.566 /0.94433≈0.599.

So S_1=12*1.05953 *0.599 ≈ 12 *1.05953≈12.714; 12.714 *0.599≈7.606.

Still below 14, C_1=0.

j=2:

u^2≈1.05953^2≈1.1221.

d^8≈0.634 (from j=2, d^(8)=0.634).

So S_2=12 *1.1221 *0.634≈12*1.1221≈13.465, times 0.634≈13.465*0.634≈8.53.

Still below 14, C_2=0.

j=3:

u^3≈1.05953^3≈1.05953 *1.1221≈1.1875.

d^7≈0.671.

S_3=12 *1.1875 *0.671≈12*1.1875=14.25; 14.25 *0.671≈9.56.

Still below 14? No, wait, 9.56 is below 14. So C_3=0.

Wait, wait, wait, that can't be right. Because 12 * u^j *d^(10-j) for j=3: u^3≈1.1875, d^7≈0.671. So 1.1875 *0.671≈0.797. 12*0.797≈9.56, yes, which is less than 14, so C_3=0.

j=4:

u^4≈1.05953^4. Let's compute u^3=1.1875, u^4=1.1875*1.05953≈1.259.

d^6≈0.710.

S_4=12*1.259 *0.710≈12*1.259=15.108; 15.108 *0.710≈10.727. Still below 14, so C_4=0.

j=5:

u^5≈1.259 *1.05953≈1.333.

d^5≈0.752.

S_5=12 *1.333 *0.752≈12*1.333≈16.00; 16 *0.752≈12.032. Hmm, wait, 16*0.752 is 12.032? No, wait, wait: 1.333 *0.752 = approx 1.002. So 12 *1.002≈12.024. That's still below 14, so C_5=0.

Wait, but 1.333 *0.752: 1.333 *0.75 is 1.0, and 0.002, so yes, approx 1.002. So 12 *1.002=12.024, which is below 14. So C_5=0.

j=6:

u^6≈1.333 *1.05953≈1.412.

d^4≈0.796.

S_6=12 *1.412 *0.796≈12*(1.412*0.796). Let's compute 1.412 *0.796: 1.4*0.8=1.12, but more accurately: 1.412*0.796= approx 1.125.

So 12 *1.125≈13.5, which is still below 14. So C_6=0.

j=7:

u^7≈1.412 *1.05953≈1.496.

d^3≈0.8423.

S_7=12 *1.496 *0.8423≈12*(1.496*0.8423). 1.5 *0.8423≈1.263, so 12*1.263≈15.16. Now, 15.16 is above 14, so C_7=15.16-14=1.16.

So this is the first j where C_j is positive.

j=8:

u^8≈1.496 *1.05953≈1.583.

d^2≈0.8919.

S_8=12*1.583 *0.8919≈12*(1.583*0.8919). Let's compute 1.583 *0.8919≈1.410. So 12*1.410≈16.92. So C_8=16.92-14=2.92.

j=9:

u^9≈1.583 *1.05953≈1.677.

d^1≈0.94433.

S_9=12*1.677 *0.94433≈12*(1.677*0.94433). 1.677 *0.94433≈1.582. 12*1.582≈18.98. So C_9=18.98-14=4.98.

j=10:

u^10≈1.677 *1.05953≈1.777.

d^0=1.

S_10=12*1.777 *1≈21.32. C_10=21.32-14=7.32.

So now, for each j from 0 to 10, the C_j values are:

j | C_j

0 | 0

1 |0

2 |0

3 |0

4 |0

5 |0

6 |0

7 |1.16

8 |2.92

9 |4.98

10|7.32

Now, we need to compute for each j the probability p^j*(1-p)^(10-j), multiply by C_j, and sum all terms, then multiply by e^(-rT).

So the formula is:

Call Price = e^(-rT) * sum_{j=7}^{10} [p^j (1-p)^{10-j} * C_j ]

Because for j=0