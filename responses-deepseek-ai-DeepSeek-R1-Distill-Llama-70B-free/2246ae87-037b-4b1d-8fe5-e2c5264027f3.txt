Answer the following multiple choice question, selecting from the answer A through to J. After thinking, reply directly with your answer. 

The last character of your response must be the letter you have chosen.

Question:

A programmer is designing a program to catalog all books in a library. He plans to have a Book class that stores features of each book: author, title, isOnShelf, and so on, with operations like getAuthor, getTitle, getShelfInfo, and setShelfInfo. Another class, LibraryList, will store an array of Book objects. The LibraryList class will include operations such as listAllBooks, addBook, removeBook, and searchForBook. The programmer plans to implement and test the Book class first, before implementing the LibraryList class. The programmerâ€™s plan to write the Book class first is an example of

Options:

A: procedural abstraction
B: information hiding
C: bottom-up development
D: agile development
E: top-down development
F: data encapsulation
G: object-oriented programming
H: waterfall model
I: modular programming
J: software testing

Answer:
    <think>
<think>
Okay, so I've got this question about programming concepts, and I'm trying to figure it out. Let's start by reading the question carefully.

The question is about a programmer designing a program to catalog books in a library. He's creating two classes: Book and LibraryList. The Book class has properties like author, title, isOnShelf, and methods like getAuthor, getTitle, etc. Then there's the LibraryList class which stores an array of Book objects and has methods to list all books, add, remove, and search for books.

The programmer's plan is to implement and test the Book class first before moving on to the LibraryList class. The question is asking what this approach is an example of, with the options being various software development concepts.

Hmm, I remember that in software development, there are different approaches to how you design and build systems. One common approach is top-down, where you start with the big picture and break it down into smaller parts. Conversely, bottom-up starts with the smallest, most detailed pieces first and builds up.

In this scenario, the programmer is starting with the Book class, which is a basic building block. Once that's working, he'll move on to LibraryList, which uses Book objects. So he's tackling the simpler, more fundamental components first before integrating them into the larger system.

Another concept I think about is modular programming, which is about breaking a system into discrete modules that can be developed and tested independently. That seems related, but the question is more about the order of development rather than the structure itself.

Wait, what about top-down versus bottom-up development? Top-down would mean starting with the overall system (like LibraryList) and then breaking it down into smaller parts (like Book). But here, the programmer is starting with the smaller part (Book) and then moving to the larger class (LibraryList), which suggests bottom-up.

So the approach here is bottom-up development. That's when you start with the lowest-level components, test them, and then build upwards to the more complex parts.

Looking at the options, option C is bottom-up development. That should be the correct answer.
</think>

The programmer is starting with the Book class, a fundamental component, and plans to test it before moving on to the LibraryList class, which integrates these components. This approach aligns with bottom-up development, where development begins with the smallest, most basic elements and builds upward to more complex systems.

Answer: C