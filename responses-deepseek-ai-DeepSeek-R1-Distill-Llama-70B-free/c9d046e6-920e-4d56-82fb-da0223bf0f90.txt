Answer the following multiple choice question, selecting from the answer A through to J. After thinking, reply directly with your answer. 

The last character of your response must be the letter you have chosen.

Question:

Illustrate transfer of control in a PL/I program, usingGOTO statements.

Options:

A: The GOTO statement in PL/I program doesn't alter the processing sequence.
B: The GOTO statement in a PL/I program resumes processing at the next function or procedure.
C: The GOTO statement in PL/I program alters the processing sequence, discontinues the normal sequential execution and processing resumes at a point that is indicated by a label.
D: The GOTO statement in a PL/I program creates a subroutine call to a labeled section of the code.
E: The GOTO statement continues the sequential execution.
F: The GOTO statement in a PL/I program is used to repeat the execution of a loop from the beginning.
G: The GOTO statement in a PL/I program is a conditional statement that only executes if a specified condition is true.
H: The GOTO statement in a PL/I program causes the program to terminate immediately.
I: The GOTO statement in PL/I program processing resumes at a point without a label.
J: The GOTO statement in a PL/I program pauses execution and waits for user input before continuing.

Answer:
    <think>
<think>
Okay, so I've got this multiple-choice question about PL/I programming and the use of GOTO statements. I'm a bit rusty on PL/I, but I'll try to think through this step by step.

The question is asking about how the GOTO statement affects the transfer of control in a PL/I program. The options are from A to J. I remember that GOTO statements are used to alter the flow of a program, but I'm not exactly sure about the specifics in PL/I.

Let me start by recalling what I know about GOTO in general. In most programming languages, a GOTO statement transfers control to a labeled statement. So instead of executing the next line, it jumps to the line with the specified label. This changes the normal sequential execution of the program.

Looking at the options:

Option A says the GOTO doesn't alter processing sequence. That doesn't sound right. If it didn't change anything, there wouldn't be much point in using it. So I think A is incorrect.

Option B suggests that GOTO resumes at the next function or procedure. Hmm, that sounds more like a function call or return, not a GOTO. GOTO should go to a specific label within the same routine, not necessarily the next function. So B might not be correct.

Option C states that GOTO alters processing, discontinues normal execution, and resumes at a labeled point. That aligns with what I remember about GOTO. It stops the normal flow and jumps to a label. So C seems correct.

Option D claims GOTO creates a subroutine call. No, that's not right. Subroutine calls are typically done with a CALL statement, not GOTO. GOTO is for branching within the same program, not invoking subroutines. So D is wrong.

Option E says GOTO continues sequential execution. That's the opposite of what GOTO does. GOTO stops the sequential flow, so E is incorrect.

Option F says GOTO is used to repeat a loop. Well, in some languages, like BASIC, you might use GOTO to loop, but in PL/I, there are loop constructs like DO loops. Using GOTO to repeat a loop from the beginning might be possible, but I'm not sure if that's the primary function of GOTO in PL/I. Also, the question is about the general effect of GOTO, not specific uses like loops. So F might not be the best choice.

Option G describes GOTO as a conditional statement. No, GOTO itself isn't conditional. It's an unconditional jump. If you want conditionality, you might use an IF statement combined with GOTO, but the GOTO itself doesn't check conditions. So G is incorrect.

Option H says GOTO causes the program to terminate. No, that's what an EXIT or STOP statement might do. GOTO just changes the flow, not terminate. So H is wrong.

Option I says processing resumes at a point without a label. That can't be right because GOTO requires a label to jump to. If there's no label, it wouldn't make sense. So I is incorrect.

Option J mentions pausing for user input. No, that's what input functions like READ or GET are for. GOTO doesn't handle input; it just changes program flow. So J is wrong.

So putting it all together, the correct answer should be option C. It correctly describes that GOTO alters the processing sequence by jumping to a labeled point, disrupting the normal execution flow.
</think>

The GOTO statement in PL/I is used to transfer control to a labeled point in the program, altering the normal sequential execution. It does not create subroutine calls, pause execution, or terminate the program. Instead, it discontinues the current flow and resumes processing at the specified label.

Answer: C